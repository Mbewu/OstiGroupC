function [ ] = RunAndVisualiseCancerSimulation()
%% First draft code to set up the initial matrix 
% This code is a first attempt at setting up the initial matrix required
% for the simulation.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Section 1: Defining the variables for the problem

cancervariable.matrixrownumber = 10; % number of rows for the cellular automaton grid
cancervariable.matrixcolnumber = 10; % number of columns for the cellular automaton grid
cancervariable.vesseldensity = 0.00; % gives the density of the vessels in the cellular automaton grid
% vessel density = (number of grid elements containing vessels)/(number of grid elements which is the rownumber*colnumber)
%this means the vessel density indirectly gives the number of cells
%containing vessels which will be randomly distributed in the grid.
cancervariable.initialtumourdiameter = 0; % number of tumor cells that make up the diameter of the disk of tumor cells that initially starts in the center of the grid
cancervariable.initialpH = 7.4; %Initial pH value that is uniform across the grid (i.e. every cell begins with a pH value of initialpH)
cancervariable.initialglucoseconcentration = 1; % Initial value of glucose concentration that is uniform across the grid.
cancervariable.statematrix = ones(cancervariable.matrixrownumber,cancervariable.matrixcolnumber); % matrix representing the state of each grid element (i.e. is it empty = 0, normal cell = 1, tumor cell = 2, a micro-vessel = 3). Notice that we're populating the matrix with normal cells
cancervariable.pHmatrix = cancervariable.initialpH*ones(cancervariable.matrixrownumber,cancervariable.matrixcolnumber); % matrix representing the value of the pH of the corresponding grid element
cancervariable.glucosematrix = cancervariable.initialglucoseconcentration*ones(cancervariable.matrixrownumber,cancervariable.matrixcolnumber); % matrix representing the value of the glucose concentration of the corresponding grid element
cancervariable.ghostvaluematrix = ones(cancervariable.matrixrownumber,cancervariable.matrixcolnumber); % matrix representing the "ghost values" for the grid element (only valid for grid elements that contain vessels).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Section 2: Setting up and visualise the initial state matrix

cancervariable.statematrix = initStateMatrix(cancervariable);


%Show the state matrix
imagesc(cancervariable.statematrix);
%%%%%%%%%%WHAT ARE THE GHOST VALUES?%%%%%%%%%%%%%%%%%%%%%%%%

%findGlucoseMatrix

cancervariable.glucosematrix = findGlucoseMatrix(cancervariable);



Delta = 0.002; %(centimetres)
D_G = 9.1e-5; %(centimetres^2 / s)
kr = zeros(4,1);
kr(1) = 0; % empty k
kr(2) = 1e-4; % normal k
kr(3)= 1e-3; % tumor k (1/s)
kr(4) = 0; %vessel dummy
q_G = 3.0e-5; %(centimetres / s)
G_S = 5.0; % (mM)

N = cancervariable.matrixrownumber;
M = cancervariable.matrixcolnumber;

noVessels = sum(sum(cancervariable.statematrix==3));

G = ones(N,M);
Gvec = zeros(N*M-noVessels,1);

systemMatrix = zeros(N*M-noVessels,N*M-noVessels);
rhs = zeros(N*M-noVessels,1);

%set up matrix id to vector id map
%if vessel then id = 0, otherwise numbered rowwise
m2v = zeros(N,M);
v2m = zeros(N*M-noVessels,2);
count = 1;
for i=1:N
    for j=1:M
        if (cancervariable.statematrix(i,j) == 3)
            m2v(i,j) = 0;
        else
            m2v(i,j) = count;
            v2m(count,:) = [i j];
            count = count + 1;
        end
    end
end

v2m;
m2v;

Delta2 = Delta*Delta; %delta squared to be reused
for i = 1:N
    for j = 1:M
        k = mat2vec(i,j,m2v); %row to be filled in
        % vessel above, to the right, below and to the left
        if(m2v(i,j) == 0)
          %do nothing except give boundary value
          G(i,j) = G_S;
        elseif(mat2vec(i-1,j,m2v) == 0)
            kij = kr(cancervariable.statematrix(i,j)+1);
            systemMatrix(k,mat2vec(i+1,j,m2v)) = systemMatrix(k,mat2vec(i+1,j,m2v)) + 1;
            systemMatrix(k,mat2vec(i,j+1,m2v)) = systemMatrix(k,mat2vec(i,j+1,m2v)) + 1;
            systemMatrix(k,mat2vec(i,j-1,m2v)) = systemMatrix(k,mat2vec(i,j-1,m2v)) + 1;
            systemMatrix(k,mat2vec(i,j,m2v)) = systemMatrix(k,mat2vec(i,j,m2v)) - 3 - (kij*Delta2+q_G*Delta)/D_G;
        
            rhs(k) = - q_G*Delta*G_S/D_G;
        elseif(mat2vec(i,j+1,m2v) == 0)
            kij = kr(cancervariable.statematrix(i,j)+1);
            systemMatrix(k,mat2vec(i+1,j,m2v)) = systemMatrix(k,mat2vec(i+1,j,m2v)) + 1;
            systemMatrix(k,mat2vec(i-1,j,m2v)) = systemMatrix(k,mat2vec(i-1,j,m2v)) + 1;
            systemMatrix(k,mat2vec(i,j-1,m2v)) = systemMatrix(k,mat2vec(i,j-1,m2v)) + 1;
            systemMatrix(k,mat2vec(i,j,m2v)) = systemMatrix(k,mat2vec(i,j,m2v)) - 3 - (kij*Delta2+q_G*Delta)/D_G;
        
            
            rhs(k) = - q_G*Delta*G_S/D_G;
        elseif(mat2vec(i+1,j,m2v) == 0)
            kij = kr(cancervariable.statematrix(i,j)+1);
            systemMatrix(k,mat2vec(i-1,j,m2v)) = systemMatrix(k,mat2vec(i-1,j,m2v)) + 1;
            systemMatrix(k,mat2vec(i,j+1,m2v)) = systemMatrix(k,mat2vec(i,j+1,m2v)) + 1;
            systemMatrix(k,mat2vec(i,j-1,m2v)) = systemMatrix(k,mat2vec(i,j-1,m2v)) + 1;
            systemMatrix(k,mat2vec(i,j,m2v)) = systemMatrix(k,mat2vec(i,j,m2v)) - 3 - (kij*Delta2+q_G*Delta)/D_G;
        
            rhs(k) = - q_G*Delta*G_S/D_G;
        elseif(mat2vec(i,j-1,m2v) == 0)
            kij = kr(cancervariable.statematrix(i,j)+1);
            systemMatrix(k,mat2vec(i+1,j,m2v)) = systemMatrix(k,mat2vec(i+1,j,m2v)) + 1;
            systemMatrix(k,mat2vec(i-1,j,m2v)) = systemMatrix(k,mat2vec(i-1,j,m2v)) + 1;
            systemMatrix(k,mat2vec(i,j+1,m2v)) = systemMatrix(k,mat2vec(i,j+1,m2v)) + 1;
            systemMatrix(k,mat2vec(i,j,m2v)) = systemMatrix(k,mat2vec(i,j,m2v)) - 3 - (kij*Delta2+q_G*Delta)/D_G;
        
            rhs(k) = - q_G*Delta*G_S/D_G;
        else
            kij = kr(cancervariable.statematrix(i,j)+1);        
            systemMatrix(k,mat2vec(i+1,j,m2v)) = systemMatrix(k,mat2vec(i+1,j,m2v)) + 1;
            systemMatrix(k,mat2vec(i-1,j,m2v)) = systemMatrix(k,mat2vec(i-1,j,m2v)) + 1;
            systemMatrix(k,mat2vec(i,j+1,m2v)) = systemMatrix(k,mat2vec(i,j+1,m2v)) + 1;
            systemMatrix(k,mat2vec(i,j-1,m2v)) = systemMatrix(k,mat2vec(i,j-1,m2v)) + 1;
            systemMatrix(k,mat2vec(i,j,m2v)) = systemMatrix(k,mat2vec(i,j,m2v)) - 4 - kij*Delta2/D_G;
        
            rhs(k) = 0;
        end
    end
end

figure
size(systemMatrix)
pcolor(systemMatrix)

spy(systemMatrix)

Gvec = systemMatrix\rhs;

for k = 1:length(Gvec)
    i = v2m(k,1);
    j = v2m(k,2);
    G(i,j) = Gvec(k);
end

%find max that is less than G_S
max = 0;
for i=1:N
    for j = 1:N
        if(G(i,j)>max && G(i,j)<G_S)
            max = G(i,j);
        end
    end
end
max

cancervariable.glucosematrix = G;

figure;
pcolor(cancervariable.statematrix)
title('cancervariable.statematrix');
figure;
pcolor(G)
caxis([min(min(G)) max])
colorbar
title('glucose level');


end